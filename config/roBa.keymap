#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80
#define MOUSE 4
#define SCROLL 5
#define NUM 6

&sl { release-after-ms = <250>; }; // ダブルクリックに必要な時間を設定
/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        underscore {
            bindings = <&kp LS(INT_RO)>;
            key-positions = <7 6>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <25 26>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <12 13>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <11 12>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <24 25>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <13 14>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
        };

        mb1-left {
            bindings = <&mkp MB1>;
            key-positions = <23 24 25>;
        };

        mb2 {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        MoveToPE {
            bindings = <&kp LC(END)>;
            key-positions = <30 31 32>;
        };

        MoveToPT {
            bindings = <&kp LC(HOME)>;
            key-positions = <18 19 20>;
        };

        CloseTab {
            bindings = <&kp LG(W)>;
            key-positions = <30 31 32 33>;
        };

        RedoTab {
            bindings = <&kp LS(LG(T))>;
            key-positions = <18 19 20 21>;
        };

        mb3 {
            bindings = <&mkp MB3>;
            key-positions = <18 20>;
        };

        mb2-2 {
            bindings = <&mkp MB2>;
            key-positions = <32 31>;
        };

        mb1-2 {
            bindings = <&mkp MB1>;
            key-positions = <30 31>;
        };

        mb3-2 {
            bindings = <&mkp MB3>;
            key-positions = <30 32>;
        };

        mb2-left {
            bindings = <&mkp MB2>;
            key-positions = <11 12 13>;
        };
    };

    macros {
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl MOUSE>;

            label = "MKP_EXIT_AML";
        };

        setphrase1: setphrase1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LS(S) &kp H &kp O &kp W &kp A &kp N3 &kp N7 &kp N1 &kp N2 &kp N0 &kp N5>;
            label = "SETPHRASE1";
        };

        setphrase2: setphrase2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp H &kp O &kp S &kp H &kp I &kp N &kp O &kp MINUS &kp T &kp A &kp K &kp E &kp S &kp H &kp I &kp LEFT_BRACKET &kp M &kp K &kp I &kp DOT &kp C &kp O &kp DOT &kp J &kp P>;
            label = "SETPHRASE2";
        };

        setphrase3: setphrase3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp H &kp O &kp S &kp H &kp I &kp N &kp O &kp LEFT_BRACKET &kp P &kp T &kp U &kp N &kp E &kp D &kp DOT &kp N &kp E &kp T>;
            label = "SETPHRASE3";
        };

        addquotechar: addquotechar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LANGUAGE_2 &kp GT &kp HOME &kp DOWN>;
            label = "ADDQUOTECHAR";
        };

        SwitchToBt0: SwitchToBt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&out OUT_BLE>,
                <&macro_pause_for_release>,
                <&bt BT_SEL 0>;

            label = "SWITCHTOBT0";
            wait-ms = <1000>;
        };

        SwitchToBt1: SwitchToBt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&out OUT_BLE>,
                <&macro_pause_for_release>,
                <&bt BT_SEL 1>;

            label = "SWITCHTOBT1";
            wait-ms = <1000>;
        };

        AddParenthsis: MAddParenthsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp ASTERISK &kp LEFT_PARENTHESIS &kp LEFT &kp LANGUAGE_1>;
            label = "MADDPARENTHSIS";
        };

        AddBracket: AddBracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp RIGHT_BRACKET &kp NON_US_HASH &kp LEFT &kp LANGUAGE_1>;
            label = "ADDBRACKET";
        };

        AddDoublequote: AddDoublequote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT &kp AT &kp LEFT &kp LANGUAGE_1>;
            label = "ADDDOUBLEQUOTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&TdTabOnQKey      &kp W         &kp E         &kp R             &kp T                                              &kp Y        &kp U  &kp I        &kp O       &kp P
&kp A             &kp S         &kp D         &kp F             &kp G          &mo 2                &kp PAGE_UP    &kp H        &kp J  &lt 5 K      &lt 3 L     &lt 4 RET
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V             &kp B          &kp ESCAPE           &kp PAGE_DOWN  &kp N        &kp M  &lt 5 COMMA  &kp PERIOD  &mt RIGHT_SHIFT SLASH
&kp LEFT_CONTROL  &sk LEFT_WIN  &sk LEFT_ALT  &lt 6 LANGUAGE_1  &TdLeftThumb2  &lt 1 BACKSPACE      &lt 2 SPACE    &lt 1 SPACE                                  &kp LANGUAGE_2
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SPECIALCHAR {
            bindings = <
&none             &kp AT             &kp EXCL    &kp HASH         &kp PLUS                                   &kp UNDER          &kp SINGLE_QUOTE  &kp SEMICOLON         &kp LS(INTERNATIONAL_1)  &kp PERCENT
&kp LEFT_BRACKET  &kp AMPS           &kp DOLLAR  &kp CARET        &kp LEFT_BRACE  &none       &bt BT_DISC 1  &kp RIGHT_BRACKET  &kp ASTRK         &kp LEFT_PARENTHESIS  &kp NON_US_HASH          &kp F10
&none             &kp DOUBLE_QUOTES  &kp EQUAL   &kp LS(INT_YEN)  &kp INT_YEN     &none       &bt BT_DISC 0  &kp COLON          &kp MINUS         &kp COMMA             &kp DOT                  &kp SLASH
&trans            &trans             &trans      &trans           &trans          &trans      &trans         &trans                                                                              &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        ARROW {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3   &kp NUMBER_4   &kp NUMBER_5                             &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&out OUT_USB  &out OUT_BLE    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none       &bt BT_SEL 1  &MmLeftHome   &MmDownPD      &MmUpPU       &MmRightEnd   &kp F10
&bt BT_CLR    &bt BT_CLR_ALL  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &none       &bt BT_SEL 0  &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP   &kp END       &kp F10
&trans        &trans          &trans         &trans         &trans         &trans      &trans        &trans                                                   &none
            >;

            sensor-bindings = <&inc_dec_kp LC(END) LC(HOME)>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                       &setphrase1     &setphrase2  &setphrase3      &trans  &trans
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans      &trans  &kp LANG2       &kp LANG1    &addquotechar    &trans  &trans
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans      &trans  &AddParenthsis  &AddBracket  &AddDoublequote  &trans  &bt BT_CLR
&trans   &trans   &trans   &trans   &trans   &trans      &trans  &trans                                                &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                            &trans  &trans             &trans    &trans             &trans
&trans  &trans  &trans  &trans  &trans             &trans                 &none   &trans  &mkp_exit_AML MB1  &mkp MB2  &mkp_exit_AML MB3  &trans
&trans  &trans  &trans  &trans  &trans             &trans                 &trans  &trans  &trans             &trans    &trans             &trans
&trans  &trans  &trans  &trans  &mkp_exit_AML MB1  &mkp_exit_AML MB2      &trans  &trans                                                  &mkp_exit_AML MB3
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &mkp MB3  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB2  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SCREEN {
            bindings = <
&kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &trans  &trans                           &trans             &kp LA(LC(Q))  &kp LA(LC(O))  &trans             &kp LA(LC(BACKSPACE))
&trans            &trans            &trans            &trans  &trans  &trans      &trans       &kp LA(LC(EQUAL))  &kp LC(LA(E))  &kp LA(LC(G))  &kp LA(LC(MINUS))  &kp LA(LC(ENTER))
&trans            &trans            &trans            &trans  &trans  &trans      &bootloader  &kp LG(COLON)      &kp LA(LC(D))  &kp LA(LC(P))  &kp LG(MINUS)      &trans
&trans            &trans            &trans            &trans  &trans  &trans      &trans       &trans                                                              &trans
            >;
        };
    };

    behaviors {
        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        TdLeftThumb2: TdLeftThumb2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TDLEFTTHUMB2";
            #binding-cells = <0>;
            bindings = <&sk LEFT_CONTROL>, <&kp ESCAPE>;

            tapping-term-ms = <300>;
        };

        TdTabOnQKey: TdTabOnQKey {
            compatible = "zmk,behavior-tap-dance";
            label = "TDTABONQKEY";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp TAB>;

            tapping-term-ms = <300>;
        };

        MmLang1Lang2: MmLang1Lang2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MMLANG1LANG2";
            bindings = <&kp LANGUAGE_1>, <&kp LANGUAGE_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        MmLeftHome: MmLeftHome {
            compatible = "zmk,behavior-mod-morph";
            label = "MMLEFTHOME";
            bindings = <&kp LEFT>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmDownPD: MmDownPD {
            compatible = "zmk,behavior-mod-morph";
            label = "MMDOWNPD";
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmUpPU: MmUpPU {
            compatible = "zmk,behavior-mod-morph";
            label = "MMUPPU";
            bindings = <&kp UP_ARROW>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        MmRightEnd: MmRightEnd {
            compatible = "zmk,behavior-mod-morph";
            label = "MMRIGHTEND";
            bindings = <&kp RIGHT>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };
};
